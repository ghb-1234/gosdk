// Code generated by protoc-gen-go. DO NOT EDIT.
// source: des3.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Des3GenerateRequest struct {
	Ephemeral bool `protobuf:"varint,1,opt,name=ephemeral" json:"ephemeral,omitempty"`
}

func (m *Des3GenerateRequest) Reset()                    { *m = Des3GenerateRequest{} }
func (m *Des3GenerateRequest) String() string            { return proto.CompactTextString(m) }
func (*Des3GenerateRequest) ProtoMessage()               {}
func (*Des3GenerateRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *Des3GenerateRequest) GetEphemeral() bool {
	if m != nil {
		return m.Ephemeral
	}
	return false
}

type Des3GenerateResponse struct {
	Label []byte `protobuf:"bytes,1,opt,name=label,proto3" json:"label,omitempty"`
	Value []byte `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *Des3GenerateResponse) Reset()                    { *m = Des3GenerateResponse{} }
func (m *Des3GenerateResponse) String() string            { return proto.CompactTextString(m) }
func (*Des3GenerateResponse) ProtoMessage()               {}
func (*Des3GenerateResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *Des3GenerateResponse) GetLabel() []byte {
	if m != nil {
		return m.Label
	}
	return nil
}

func (m *Des3GenerateResponse) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

type Des3EncryptRequest struct {
	Label []byte `protobuf:"bytes,1,opt,name=label,proto3" json:"label,omitempty"`
	Msg   []byte `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (m *Des3EncryptRequest) Reset()                    { *m = Des3EncryptRequest{} }
func (m *Des3EncryptRequest) String() string            { return proto.CompactTextString(m) }
func (*Des3EncryptRequest) ProtoMessage()               {}
func (*Des3EncryptRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *Des3EncryptRequest) GetLabel() []byte {
	if m != nil {
		return m.Label
	}
	return nil
}

func (m *Des3EncryptRequest) GetMsg() []byte {
	if m != nil {
		return m.Msg
	}
	return nil
}

type Des3EncryptResponse struct {
	Dst []byte `protobuf:"bytes,1,opt,name=dst,proto3" json:"dst,omitempty"`
}

func (m *Des3EncryptResponse) Reset()                    { *m = Des3EncryptResponse{} }
func (m *Des3EncryptResponse) String() string            { return proto.CompactTextString(m) }
func (*Des3EncryptResponse) ProtoMessage()               {}
func (*Des3EncryptResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

func (m *Des3EncryptResponse) GetDst() []byte {
	if m != nil {
		return m.Dst
	}
	return nil
}

type Des3DecryptRequest struct {
	Label []byte `protobuf:"bytes,1,opt,name=label,proto3" json:"label,omitempty"`
	Msg   []byte `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (m *Des3DecryptRequest) Reset()                    { *m = Des3DecryptRequest{} }
func (m *Des3DecryptRequest) String() string            { return proto.CompactTextString(m) }
func (*Des3DecryptRequest) ProtoMessage()               {}
func (*Des3DecryptRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{4} }

func (m *Des3DecryptRequest) GetLabel() []byte {
	if m != nil {
		return m.Label
	}
	return nil
}

func (m *Des3DecryptRequest) GetMsg() []byte {
	if m != nil {
		return m.Msg
	}
	return nil
}

type Des3DecryptResponse struct {
	Dst []byte `protobuf:"bytes,1,opt,name=dst,proto3" json:"dst,omitempty"`
}

func (m *Des3DecryptResponse) Reset()                    { *m = Des3DecryptResponse{} }
func (m *Des3DecryptResponse) String() string            { return proto.CompactTextString(m) }
func (*Des3DecryptResponse) ProtoMessage()               {}
func (*Des3DecryptResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{5} }

func (m *Des3DecryptResponse) GetDst() []byte {
	if m != nil {
		return m.Dst
	}
	return nil
}

func init() {
	proto.RegisterType((*Des3GenerateRequest)(nil), "pb.Des3GenerateRequest")
	proto.RegisterType((*Des3GenerateResponse)(nil), "pb.Des3GenerateResponse")
	proto.RegisterType((*Des3EncryptRequest)(nil), "pb.Des3EncryptRequest")
	proto.RegisterType((*Des3EncryptResponse)(nil), "pb.Des3EncryptResponse")
	proto.RegisterType((*Des3DecryptRequest)(nil), "pb.Des3DecryptRequest")
	proto.RegisterType((*Des3DecryptResponse)(nil), "pb.Des3DecryptResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Des3Operate service

type Des3OperateClient interface {
	Des3Generate(ctx context.Context, in *Des3GenerateRequest, opts ...grpc.CallOption) (*Des3GenerateResponse, error)
	Des3EncryptData(ctx context.Context, in *Des3EncryptRequest, opts ...grpc.CallOption) (*Des3EncryptResponse, error)
	Des3DecryptData(ctx context.Context, in *Des3DecryptRequest, opts ...grpc.CallOption) (*Des3DecryptResponse, error)
	Des3Key(ctx context.Context, in *Des3GenerateRequest, opts ...grpc.CallOption) (*Des3GenerateResponse, error)
}

type des3OperateClient struct {
	cc *grpc.ClientConn
}

func NewDes3OperateClient(cc *grpc.ClientConn) Des3OperateClient {
	return &des3OperateClient{cc}
}

func (c *des3OperateClient) Des3Generate(ctx context.Context, in *Des3GenerateRequest, opts ...grpc.CallOption) (*Des3GenerateResponse, error) {
	out := new(Des3GenerateResponse)
	err := grpc.Invoke(ctx, "/pb.Des3Operate/Des3Generate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *des3OperateClient) Des3EncryptData(ctx context.Context, in *Des3EncryptRequest, opts ...grpc.CallOption) (*Des3EncryptResponse, error) {
	out := new(Des3EncryptResponse)
	err := grpc.Invoke(ctx, "/pb.Des3Operate/Des3EncryptData", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *des3OperateClient) Des3DecryptData(ctx context.Context, in *Des3DecryptRequest, opts ...grpc.CallOption) (*Des3DecryptResponse, error) {
	out := new(Des3DecryptResponse)
	err := grpc.Invoke(ctx, "/pb.Des3Operate/Des3DecryptData", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *des3OperateClient) Des3Key(ctx context.Context, in *Des3GenerateRequest, opts ...grpc.CallOption) (*Des3GenerateResponse, error) {
	out := new(Des3GenerateResponse)
	err := grpc.Invoke(ctx, "/pb.Des3Operate/Des3Key", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Des3Operate service

type Des3OperateServer interface {
	Des3Generate(context.Context, *Des3GenerateRequest) (*Des3GenerateResponse, error)
	Des3EncryptData(context.Context, *Des3EncryptRequest) (*Des3EncryptResponse, error)
	Des3DecryptData(context.Context, *Des3DecryptRequest) (*Des3DecryptResponse, error)
	Des3Key(context.Context, *Des3GenerateRequest) (*Des3GenerateResponse, error)
}

func RegisterDes3OperateServer(s *grpc.Server, srv Des3OperateServer) {
	s.RegisterService(&_Des3Operate_serviceDesc, srv)
}

func _Des3Operate_Des3Generate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Des3GenerateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Des3OperateServer).Des3Generate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Des3Operate/Des3Generate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Des3OperateServer).Des3Generate(ctx, req.(*Des3GenerateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Des3Operate_Des3EncryptData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Des3EncryptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Des3OperateServer).Des3EncryptData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Des3Operate/Des3EncryptData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Des3OperateServer).Des3EncryptData(ctx, req.(*Des3EncryptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Des3Operate_Des3DecryptData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Des3DecryptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Des3OperateServer).Des3DecryptData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Des3Operate/Des3DecryptData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Des3OperateServer).Des3DecryptData(ctx, req.(*Des3DecryptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Des3Operate_Des3Key_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Des3GenerateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Des3OperateServer).Des3Key(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Des3Operate/Des3Key",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Des3OperateServer).Des3Key(ctx, req.(*Des3GenerateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Des3Operate_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Des3Operate",
	HandlerType: (*Des3OperateServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Des3Generate",
			Handler:    _Des3Operate_Des3Generate_Handler,
		},
		{
			MethodName: "Des3EncryptData",
			Handler:    _Des3Operate_Des3EncryptData_Handler,
		},
		{
			MethodName: "Des3DecryptData",
			Handler:    _Des3Operate_Des3DecryptData_Handler,
		},
		{
			MethodName: "Des3Key",
			Handler:    _Des3Operate_Des3Key_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "des3.proto",
}

func init() { proto.RegisterFile("des3.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 268 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x52, 0x3d, 0x4f, 0xc3, 0x30,
	0x14, 0x6c, 0x53, 0xf1, 0xf5, 0xa8, 0x44, 0xf5, 0xa8, 0x68, 0x54, 0x31, 0x20, 0x2f, 0x30, 0x65,
	0xc0, 0x2b, 0x62, 0x00, 0x23, 0x06, 0x06, 0xa4, 0xfc, 0x03, 0x9b, 0x3e, 0xc1, 0x90, 0x26, 0xc6,
	0x76, 0x91, 0xfa, 0x67, 0xf8, 0xad, 0xc8, 0xb1, 0xd3, 0xd6, 0x6d, 0x59, 0x60, 0xb3, 0xcf, 0xef,
	0xee, 0xde, 0x9d, 0x0c, 0x30, 0x23, 0xcb, 0x0b, 0x6d, 0x1a, 0xd7, 0x60, 0xa6, 0x15, 0xe3, 0x70,
	0x2e, 0xc8, 0xf2, 0x67, 0xaa, 0xc9, 0x48, 0x47, 0x25, 0x7d, 0x2e, 0xc8, 0x3a, 0xbc, 0x84, 0x13,
	0xd2, 0x1f, 0x34, 0x27, 0x23, 0xab, 0xbc, 0x7f, 0xd5, 0xbf, 0x39, 0x2e, 0xd7, 0x00, 0x7b, 0x80,
	0x71, 0x4a, 0xb2, 0xba, 0xa9, 0x2d, 0xe1, 0x18, 0x0e, 0x2a, 0xa9, 0x28, 0x30, 0x86, 0x65, 0xb8,
	0x78, 0xf4, 0x4b, 0x56, 0x0b, 0xca, 0xb3, 0x80, 0xb6, 0x17, 0x76, 0x07, 0xe8, 0x35, 0x9e, 0xea,
	0x37, 0xb3, 0xd4, 0xae, 0xf3, 0xdd, 0xaf, 0x30, 0x82, 0xc1, 0xdc, 0xbe, 0x47, 0xbe, 0x3f, 0xb2,
	0xeb, 0xb0, 0xf6, 0x8a, 0x1d, 0x17, 0x18, 0xc1, 0x60, 0x66, 0x5d, 0x24, 0xfb, 0x63, 0x67, 0x23,
	0xe8, 0x3f, 0x36, 0x2b, 0xf6, 0x6f, 0x36, 0xb7, 0xdf, 0x19, 0x9c, 0xfa, 0xc9, 0x57, 0xdd, 0x36,
	0x82, 0x8f, 0x30, 0xdc, 0x6c, 0x08, 0x27, 0x85, 0x56, 0xc5, 0x9e, 0xa2, 0xa7, 0xf9, 0xee, 0x43,
	0x30, 0x61, 0x3d, 0x14, 0x70, 0xb6, 0x11, 0x52, 0x48, 0x27, 0xf1, 0xa2, 0x1b, 0x4f, 0x7b, 0x9b,
	0x4e, 0x76, 0xf0, 0x6d, 0x95, 0x98, 0x21, 0x55, 0x49, 0x6b, 0x59, 0xab, 0x6c, 0x05, 0x66, 0x3d,
	0xbc, 0x87, 0x23, 0xff, 0xf0, 0x42, 0xcb, 0x3f, 0x65, 0x51, 0x87, 0xed, 0x97, 0xe3, 0x3f, 0x01,
	0x00, 0x00, 0xff, 0xff, 0x3c, 0x4b, 0xfc, 0xfe, 0x80, 0x02, 0x00, 0x00,
}
