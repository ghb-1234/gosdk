// Code generated by protoc-gen-go. DO NOT EDIT.
// source: sm2.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Sm2GenerateRequest struct {
	Ephemeral bool `protobuf:"varint,1,opt,name=ephemeral" json:"ephemeral,omitempty"`
}

func (m *Sm2GenerateRequest) Reset()                    { *m = Sm2GenerateRequest{} }
func (m *Sm2GenerateRequest) String() string            { return proto.CompactTextString(m) }
func (*Sm2GenerateRequest) ProtoMessage()               {}
func (*Sm2GenerateRequest) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{0} }

func (m *Sm2GenerateRequest) GetEphemeral() bool {
	if m != nil {
		return m.Ephemeral
	}
	return false
}

type Sm2GenerateResponse struct {
	Label []byte `protobuf:"bytes,1,opt,name=label,proto3" json:"label,omitempty"`
	D     []byte `protobuf:"bytes,2,opt,name=D,proto3" json:"D,omitempty"`
	X     []byte `protobuf:"bytes,3,opt,name=X,proto3" json:"X,omitempty"`
	Y     []byte `protobuf:"bytes,4,opt,name=Y,proto3" json:"Y,omitempty"`
}

func (m *Sm2GenerateResponse) Reset()                    { *m = Sm2GenerateResponse{} }
func (m *Sm2GenerateResponse) String() string            { return proto.CompactTextString(m) }
func (*Sm2GenerateResponse) ProtoMessage()               {}
func (*Sm2GenerateResponse) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{1} }

func (m *Sm2GenerateResponse) GetLabel() []byte {
	if m != nil {
		return m.Label
	}
	return nil
}

func (m *Sm2GenerateResponse) GetD() []byte {
	if m != nil {
		return m.D
	}
	return nil
}

func (m *Sm2GenerateResponse) GetX() []byte {
	if m != nil {
		return m.X
	}
	return nil
}

func (m *Sm2GenerateResponse) GetY() []byte {
	if m != nil {
		return m.Y
	}
	return nil
}

type Sm2SignRequest struct {
	Label []byte `protobuf:"bytes,1,opt,name=label,proto3" json:"label,omitempty"`
	Msg   []byte `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (m *Sm2SignRequest) Reset()                    { *m = Sm2SignRequest{} }
func (m *Sm2SignRequest) String() string            { return proto.CompactTextString(m) }
func (*Sm2SignRequest) ProtoMessage()               {}
func (*Sm2SignRequest) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{2} }

func (m *Sm2SignRequest) GetLabel() []byte {
	if m != nil {
		return m.Label
	}
	return nil
}

func (m *Sm2SignRequest) GetMsg() []byte {
	if m != nil {
		return m.Msg
	}
	return nil
}

type Sm2SignResponse struct {
	Dst []byte `protobuf:"bytes,1,opt,name=dst,proto3" json:"dst,omitempty"`
}

func (m *Sm2SignResponse) Reset()                    { *m = Sm2SignResponse{} }
func (m *Sm2SignResponse) String() string            { return proto.CompactTextString(m) }
func (*Sm2SignResponse) ProtoMessage()               {}
func (*Sm2SignResponse) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{3} }

func (m *Sm2SignResponse) GetDst() []byte {
	if m != nil {
		return m.Dst
	}
	return nil
}

type Sm2VerifyRequest struct {
	Label []byte `protobuf:"bytes,1,opt,name=label,proto3" json:"label,omitempty"`
	Msg   []byte `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Dst   []byte `protobuf:"bytes,3,opt,name=dst,proto3" json:"dst,omitempty"`
}

func (m *Sm2VerifyRequest) Reset()                    { *m = Sm2VerifyRequest{} }
func (m *Sm2VerifyRequest) String() string            { return proto.CompactTextString(m) }
func (*Sm2VerifyRequest) ProtoMessage()               {}
func (*Sm2VerifyRequest) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{4} }

func (m *Sm2VerifyRequest) GetLabel() []byte {
	if m != nil {
		return m.Label
	}
	return nil
}

func (m *Sm2VerifyRequest) GetMsg() []byte {
	if m != nil {
		return m.Msg
	}
	return nil
}

func (m *Sm2VerifyRequest) GetDst() []byte {
	if m != nil {
		return m.Dst
	}
	return nil
}

type Sm2VerifyResponse struct {
	Valid bool `protobuf:"varint,1,opt,name=valid" json:"valid,omitempty"`
}

func (m *Sm2VerifyResponse) Reset()                    { *m = Sm2VerifyResponse{} }
func (m *Sm2VerifyResponse) String() string            { return proto.CompactTextString(m) }
func (*Sm2VerifyResponse) ProtoMessage()               {}
func (*Sm2VerifyResponse) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{5} }

func (m *Sm2VerifyResponse) GetValid() bool {
	if m != nil {
		return m.Valid
	}
	return false
}

type Sm2EncryptRequest struct {
	Label []byte `protobuf:"bytes,1,opt,name=label,proto3" json:"label,omitempty"`
	Msg   []byte `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (m *Sm2EncryptRequest) Reset()                    { *m = Sm2EncryptRequest{} }
func (m *Sm2EncryptRequest) String() string            { return proto.CompactTextString(m) }
func (*Sm2EncryptRequest) ProtoMessage()               {}
func (*Sm2EncryptRequest) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{6} }

func (m *Sm2EncryptRequest) GetLabel() []byte {
	if m != nil {
		return m.Label
	}
	return nil
}

func (m *Sm2EncryptRequest) GetMsg() []byte {
	if m != nil {
		return m.Msg
	}
	return nil
}

type Sm2EncryptResponse struct {
	Dst []byte `protobuf:"bytes,1,opt,name=dst,proto3" json:"dst,omitempty"`
}

func (m *Sm2EncryptResponse) Reset()                    { *m = Sm2EncryptResponse{} }
func (m *Sm2EncryptResponse) String() string            { return proto.CompactTextString(m) }
func (*Sm2EncryptResponse) ProtoMessage()               {}
func (*Sm2EncryptResponse) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{7} }

func (m *Sm2EncryptResponse) GetDst() []byte {
	if m != nil {
		return m.Dst
	}
	return nil
}

type Sm2DecryptRequest struct {
	Label []byte `protobuf:"bytes,1,opt,name=label,proto3" json:"label,omitempty"`
	Msg   []byte `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (m *Sm2DecryptRequest) Reset()                    { *m = Sm2DecryptRequest{} }
func (m *Sm2DecryptRequest) String() string            { return proto.CompactTextString(m) }
func (*Sm2DecryptRequest) ProtoMessage()               {}
func (*Sm2DecryptRequest) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{8} }

func (m *Sm2DecryptRequest) GetLabel() []byte {
	if m != nil {
		return m.Label
	}
	return nil
}

func (m *Sm2DecryptRequest) GetMsg() []byte {
	if m != nil {
		return m.Msg
	}
	return nil
}

type Sm2DecryptResponse struct {
	Dst []byte `protobuf:"bytes,1,opt,name=dst,proto3" json:"dst,omitempty"`
}

func (m *Sm2DecryptResponse) Reset()                    { *m = Sm2DecryptResponse{} }
func (m *Sm2DecryptResponse) String() string            { return proto.CompactTextString(m) }
func (*Sm2DecryptResponse) ProtoMessage()               {}
func (*Sm2DecryptResponse) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{9} }

func (m *Sm2DecryptResponse) GetDst() []byte {
	if m != nil {
		return m.Dst
	}
	return nil
}

type Sm2PublicKeyRequest struct {
	Label []byte `protobuf:"bytes,1,opt,name=label,proto3" json:"label,omitempty"`
}

func (m *Sm2PublicKeyRequest) Reset()                    { *m = Sm2PublicKeyRequest{} }
func (m *Sm2PublicKeyRequest) String() string            { return proto.CompactTextString(m) }
func (*Sm2PublicKeyRequest) ProtoMessage()               {}
func (*Sm2PublicKeyRequest) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{10} }

func (m *Sm2PublicKeyRequest) GetLabel() []byte {
	if m != nil {
		return m.Label
	}
	return nil
}

type Sm2PublicKeyResponse struct {
	X []byte `protobuf:"bytes,1,opt,name=X,proto3" json:"X,omitempty"`
	Y []byte `protobuf:"bytes,2,opt,name=Y,proto3" json:"Y,omitempty"`
}

func (m *Sm2PublicKeyResponse) Reset()                    { *m = Sm2PublicKeyResponse{} }
func (m *Sm2PublicKeyResponse) String() string            { return proto.CompactTextString(m) }
func (*Sm2PublicKeyResponse) ProtoMessage()               {}
func (*Sm2PublicKeyResponse) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{11} }

func (m *Sm2PublicKeyResponse) GetX() []byte {
	if m != nil {
		return m.X
	}
	return nil
}

func (m *Sm2PublicKeyResponse) GetY() []byte {
	if m != nil {
		return m.Y
	}
	return nil
}

func init() {
	proto.RegisterType((*Sm2GenerateRequest)(nil), "pb.Sm2GenerateRequest")
	proto.RegisterType((*Sm2GenerateResponse)(nil), "pb.Sm2GenerateResponse")
	proto.RegisterType((*Sm2SignRequest)(nil), "pb.Sm2SignRequest")
	proto.RegisterType((*Sm2SignResponse)(nil), "pb.Sm2SignResponse")
	proto.RegisterType((*Sm2VerifyRequest)(nil), "pb.Sm2VerifyRequest")
	proto.RegisterType((*Sm2VerifyResponse)(nil), "pb.Sm2VerifyResponse")
	proto.RegisterType((*Sm2EncryptRequest)(nil), "pb.Sm2EncryptRequest")
	proto.RegisterType((*Sm2EncryptResponse)(nil), "pb.Sm2EncryptResponse")
	proto.RegisterType((*Sm2DecryptRequest)(nil), "pb.Sm2DecryptRequest")
	proto.RegisterType((*Sm2DecryptResponse)(nil), "pb.Sm2DecryptResponse")
	proto.RegisterType((*Sm2PublicKeyRequest)(nil), "pb.Sm2PublicKeyRequest")
	proto.RegisterType((*Sm2PublicKeyResponse)(nil), "pb.Sm2PublicKeyResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Sm2Operate service

type Sm2OperateClient interface {
	Sm2Generate(ctx context.Context, in *Sm2GenerateRequest, opts ...grpc.CallOption) (*Sm2GenerateResponse, error)
	Sm2SignData(ctx context.Context, in *Sm2SignRequest, opts ...grpc.CallOption) (*Sm2SignResponse, error)
	Sm2VerifyData(ctx context.Context, in *Sm2VerifyRequest, opts ...grpc.CallOption) (*Sm2VerifyResponse, error)
	Sm2EncryptData(ctx context.Context, in *Sm2EncryptRequest, opts ...grpc.CallOption) (*Sm2EncryptResponse, error)
	Sm2DecryptData(ctx context.Context, in *Sm2DecryptRequest, opts ...grpc.CallOption) (*Sm2DecryptResponse, error)
	Sm2PublicKey(ctx context.Context, in *Sm2PublicKeyRequest, opts ...grpc.CallOption) (*Sm2PublicKeyResponse, error)
}

type sm2OperateClient struct {
	cc *grpc.ClientConn
}

func NewSm2OperateClient(cc *grpc.ClientConn) Sm2OperateClient {
	return &sm2OperateClient{cc}
}

func (c *sm2OperateClient) Sm2Generate(ctx context.Context, in *Sm2GenerateRequest, opts ...grpc.CallOption) (*Sm2GenerateResponse, error) {
	out := new(Sm2GenerateResponse)
	err := grpc.Invoke(ctx, "/pb.Sm2Operate/Sm2Generate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sm2OperateClient) Sm2SignData(ctx context.Context, in *Sm2SignRequest, opts ...grpc.CallOption) (*Sm2SignResponse, error) {
	out := new(Sm2SignResponse)
	err := grpc.Invoke(ctx, "/pb.Sm2Operate/Sm2SignData", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sm2OperateClient) Sm2VerifyData(ctx context.Context, in *Sm2VerifyRequest, opts ...grpc.CallOption) (*Sm2VerifyResponse, error) {
	out := new(Sm2VerifyResponse)
	err := grpc.Invoke(ctx, "/pb.Sm2Operate/Sm2VerifyData", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sm2OperateClient) Sm2EncryptData(ctx context.Context, in *Sm2EncryptRequest, opts ...grpc.CallOption) (*Sm2EncryptResponse, error) {
	out := new(Sm2EncryptResponse)
	err := grpc.Invoke(ctx, "/pb.Sm2Operate/Sm2EncryptData", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sm2OperateClient) Sm2DecryptData(ctx context.Context, in *Sm2DecryptRequest, opts ...grpc.CallOption) (*Sm2DecryptResponse, error) {
	out := new(Sm2DecryptResponse)
	err := grpc.Invoke(ctx, "/pb.Sm2Operate/Sm2DecryptData", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sm2OperateClient) Sm2PublicKey(ctx context.Context, in *Sm2PublicKeyRequest, opts ...grpc.CallOption) (*Sm2PublicKeyResponse, error) {
	out := new(Sm2PublicKeyResponse)
	err := grpc.Invoke(ctx, "/pb.Sm2Operate/Sm2PublicKey", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Sm2Operate service

type Sm2OperateServer interface {
	Sm2Generate(context.Context, *Sm2GenerateRequest) (*Sm2GenerateResponse, error)
	Sm2SignData(context.Context, *Sm2SignRequest) (*Sm2SignResponse, error)
	Sm2VerifyData(context.Context, *Sm2VerifyRequest) (*Sm2VerifyResponse, error)
	Sm2EncryptData(context.Context, *Sm2EncryptRequest) (*Sm2EncryptResponse, error)
	Sm2DecryptData(context.Context, *Sm2DecryptRequest) (*Sm2DecryptResponse, error)
	Sm2PublicKey(context.Context, *Sm2PublicKeyRequest) (*Sm2PublicKeyResponse, error)
}

func RegisterSm2OperateServer(s *grpc.Server, srv Sm2OperateServer) {
	s.RegisterService(&_Sm2Operate_serviceDesc, srv)
}

func _Sm2Operate_Sm2Generate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Sm2GenerateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Sm2OperateServer).Sm2Generate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Sm2Operate/Sm2Generate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Sm2OperateServer).Sm2Generate(ctx, req.(*Sm2GenerateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sm2Operate_Sm2SignData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Sm2SignRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Sm2OperateServer).Sm2SignData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Sm2Operate/Sm2SignData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Sm2OperateServer).Sm2SignData(ctx, req.(*Sm2SignRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sm2Operate_Sm2VerifyData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Sm2VerifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Sm2OperateServer).Sm2VerifyData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Sm2Operate/Sm2VerifyData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Sm2OperateServer).Sm2VerifyData(ctx, req.(*Sm2VerifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sm2Operate_Sm2EncryptData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Sm2EncryptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Sm2OperateServer).Sm2EncryptData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Sm2Operate/Sm2EncryptData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Sm2OperateServer).Sm2EncryptData(ctx, req.(*Sm2EncryptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sm2Operate_Sm2DecryptData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Sm2DecryptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Sm2OperateServer).Sm2DecryptData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Sm2Operate/Sm2DecryptData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Sm2OperateServer).Sm2DecryptData(ctx, req.(*Sm2DecryptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sm2Operate_Sm2PublicKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Sm2PublicKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Sm2OperateServer).Sm2PublicKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Sm2Operate/Sm2PublicKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Sm2OperateServer).Sm2PublicKey(ctx, req.(*Sm2PublicKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Sm2Operate_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Sm2Operate",
	HandlerType: (*Sm2OperateServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Sm2Generate",
			Handler:    _Sm2Operate_Sm2Generate_Handler,
		},
		{
			MethodName: "Sm2SignData",
			Handler:    _Sm2Operate_Sm2SignData_Handler,
		},
		{
			MethodName: "Sm2VerifyData",
			Handler:    _Sm2Operate_Sm2VerifyData_Handler,
		},
		{
			MethodName: "Sm2EncryptData",
			Handler:    _Sm2Operate_Sm2EncryptData_Handler,
		},
		{
			MethodName: "Sm2DecryptData",
			Handler:    _Sm2Operate_Sm2DecryptData_Handler,
		},
		{
			MethodName: "Sm2PublicKey",
			Handler:    _Sm2Operate_Sm2PublicKey_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sm2.proto",
}

func init() { proto.RegisterFile("sm2.proto", fileDescriptor4) }

var fileDescriptor4 = []byte{
	// 402 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x54, 0x51, 0x4b, 0xeb, 0x30,
	0x14, 0x5e, 0xd7, 0x7b, 0x2f, 0x77, 0xe7, 0xee, 0xea, 0xcc, 0xe6, 0x2c, 0xc5, 0x07, 0x89, 0x20,
	0x8a, 0xb0, 0x87, 0xf8, 0x32, 0x10, 0x44, 0xb1, 0xe2, 0x83, 0x82, 0xb2, 0xa2, 0x6c, 0x8f, 0xed,
	0x16, 0x67, 0xa1, 0xed, 0x62, 0xdb, 0x09, 0xfb, 0x1d, 0xfe, 0x61, 0x69, 0x92, 0x66, 0x4d, 0xe7,
	0x84, 0xe1, 0x5b, 0xce, 0xd7, 0xf3, 0x7d, 0x27, 0x39, 0xdf, 0x47, 0xa1, 0x91, 0x46, 0xa4, 0xc7,
	0x92, 0x59, 0x36, 0x43, 0x75, 0xe6, 0x63, 0x02, 0xc8, 0x8d, 0xc8, 0x2d, 0x8d, 0x69, 0xe2, 0x65,
	0x74, 0x40, 0xdf, 0xe6, 0x34, 0xcd, 0xd0, 0x3e, 0x34, 0x28, 0x7b, 0xa5, 0x11, 0x4d, 0xbc, 0xd0,
	0x32, 0x0e, 0x8c, 0xe3, 0xbf, 0x83, 0x25, 0x80, 0x9f, 0xa0, 0xad, 0x71, 0x52, 0x36, 0x8b, 0x53,
	0x8a, 0x3a, 0xf0, 0x3b, 0xf4, 0x7c, 0x2a, 0x08, 0xcd, 0x81, 0x28, 0x50, 0x13, 0x0c, 0xc7, 0xaa,
	0x73, 0xc4, 0x70, 0xf2, 0x6a, 0x68, 0x99, 0xa2, 0x1a, 0xe6, 0xd5, 0xc8, 0xfa, 0x25, 0xaa, 0x11,
	0xee, 0xc3, 0x96, 0x1b, 0x11, 0x37, 0x98, 0xc6, 0xc5, 0x35, 0xbe, 0x56, 0x6c, 0x81, 0x19, 0xa5,
	0x53, 0xa9, 0x99, 0x1f, 0xf1, 0x21, 0x6c, 0x2b, 0xa6, 0xbc, 0x4c, 0x0b, 0xcc, 0x49, 0x9a, 0x49,
	0x62, 0x7e, 0xc4, 0xf7, 0xd0, 0x72, 0x23, 0xf2, 0x4c, 0x93, 0xe0, 0x65, 0xb1, 0xe1, 0x80, 0x42,
	0xcd, 0x5c, 0xaa, 0x9d, 0xc0, 0x4e, 0x49, 0x6d, 0xb9, 0x81, 0x77, 0x2f, 0x0c, 0x26, 0x72, 0x65,
	0xa2, 0xc0, 0xe7, 0xbc, 0xf5, 0x26, 0x1e, 0x27, 0x0b, 0x96, 0x6d, 0xfa, 0xb4, 0x23, 0xee, 0x8f,
	0x22, 0xaf, 0x7d, 0x9d, 0x18, 0xe2, 0xd0, 0x1f, 0x0c, 0x51, 0xe4, 0xb5, 0x43, 0x4e, 0xb9, 0xf1,
	0x8f, 0x73, 0x3f, 0x0c, 0xc6, 0x77, 0xf4, 0xfb, 0x2d, 0x62, 0x02, 0x1d, 0xbd, 0x59, 0xca, 0xf2,
	0x08, 0x18, 0x5a, 0x04, 0x64, 0x3c, 0x46, 0xe4, 0xc3, 0x04, 0x70, 0x23, 0xf2, 0xc0, 0x78, 0xb2,
	0xd0, 0x25, 0xfc, 0x2b, 0x05, 0x0d, 0x75, 0x7b, 0xcc, 0xef, 0xad, 0xa6, 0xd5, 0xde, 0x5b, 0xc1,
	0xc5, 0x28, 0x5c, 0x43, 0x7d, 0xae, 0x90, 0x27, 0xc3, 0xf1, 0x32, 0x0f, 0x21, 0xd9, 0x59, 0x0a,
	0x99, 0xdd, 0xd6, 0x30, 0xc5, 0xbc, 0x80, 0xff, 0xca, 0x60, 0xce, 0xed, 0xc8, 0x3e, 0x2d, 0x41,
	0xf6, 0x6e, 0x05, 0x55, 0xfc, 0x2b, 0x9e, 0x66, 0x69, 0x1c, 0x17, 0x28, 0x5a, 0xf5, 0x24, 0xd8,
	0xdd, 0x2a, 0x5c, 0x91, 0x90, 0xb6, 0x68, 0x12, 0xba, 0xcf, 0x4a, 0xa2, 0xe2, 0x20, 0xae, 0xa1,
	0x6b, 0x68, 0x96, 0x4d, 0x40, 0xc5, 0xaa, 0xaa, 0x1e, 0xda, 0xd6, 0xea, 0x87, 0x42, 0xc4, 0xff,
	0xc3, 0x7f, 0x17, 0x67, 0x9f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x64, 0x09, 0xe8, 0x7f, 0x3b, 0x04,
	0x00, 0x00,
}
