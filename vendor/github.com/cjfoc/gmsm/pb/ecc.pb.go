// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ecc.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type EccGenerateRequest struct {
	Ephemeral bool `protobuf:"varint,1,opt,name=ephemeral" json:"ephemeral,omitempty"`
}

func (m *EccGenerateRequest) Reset()                    { *m = EccGenerateRequest{} }
func (m *EccGenerateRequest) String() string            { return proto.CompactTextString(m) }
func (*EccGenerateRequest) ProtoMessage()               {}
func (*EccGenerateRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

func (m *EccGenerateRequest) GetEphemeral() bool {
	if m != nil {
		return m.Ephemeral
	}
	return false
}

type EccGenerateResponse struct {
	Label []byte `protobuf:"bytes,1,opt,name=label,proto3" json:"label,omitempty"`
	D     []byte `protobuf:"bytes,2,opt,name=D,proto3" json:"D,omitempty"`
	X     []byte `protobuf:"bytes,3,opt,name=X,proto3" json:"X,omitempty"`
	Y     []byte `protobuf:"bytes,4,opt,name=Y,proto3" json:"Y,omitempty"`
}

func (m *EccGenerateResponse) Reset()                    { *m = EccGenerateResponse{} }
func (m *EccGenerateResponse) String() string            { return proto.CompactTextString(m) }
func (*EccGenerateResponse) ProtoMessage()               {}
func (*EccGenerateResponse) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{1} }

func (m *EccGenerateResponse) GetLabel() []byte {
	if m != nil {
		return m.Label
	}
	return nil
}

func (m *EccGenerateResponse) GetD() []byte {
	if m != nil {
		return m.D
	}
	return nil
}

func (m *EccGenerateResponse) GetX() []byte {
	if m != nil {
		return m.X
	}
	return nil
}

func (m *EccGenerateResponse) GetY() []byte {
	if m != nil {
		return m.Y
	}
	return nil
}

type EccSignRequest struct {
	Label []byte `protobuf:"bytes,1,opt,name=label,proto3" json:"label,omitempty"`
	Msg   []byte `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (m *EccSignRequest) Reset()                    { *m = EccSignRequest{} }
func (m *EccSignRequest) String() string            { return proto.CompactTextString(m) }
func (*EccSignRequest) ProtoMessage()               {}
func (*EccSignRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{2} }

func (m *EccSignRequest) GetLabel() []byte {
	if m != nil {
		return m.Label
	}
	return nil
}

func (m *EccSignRequest) GetMsg() []byte {
	if m != nil {
		return m.Msg
	}
	return nil
}

type EccSignResponse struct {
	Dst []byte `protobuf:"bytes,1,opt,name=dst,proto3" json:"dst,omitempty"`
}

func (m *EccSignResponse) Reset()                    { *m = EccSignResponse{} }
func (m *EccSignResponse) String() string            { return proto.CompactTextString(m) }
func (*EccSignResponse) ProtoMessage()               {}
func (*EccSignResponse) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{3} }

func (m *EccSignResponse) GetDst() []byte {
	if m != nil {
		return m.Dst
	}
	return nil
}

type EccVerifyRequest struct {
	Label []byte `protobuf:"bytes,1,opt,name=label,proto3" json:"label,omitempty"`
	Msg   []byte `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Dst   []byte `protobuf:"bytes,3,opt,name=dst,proto3" json:"dst,omitempty"`
}

func (m *EccVerifyRequest) Reset()                    { *m = EccVerifyRequest{} }
func (m *EccVerifyRequest) String() string            { return proto.CompactTextString(m) }
func (*EccVerifyRequest) ProtoMessage()               {}
func (*EccVerifyRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{4} }

func (m *EccVerifyRequest) GetLabel() []byte {
	if m != nil {
		return m.Label
	}
	return nil
}

func (m *EccVerifyRequest) GetMsg() []byte {
	if m != nil {
		return m.Msg
	}
	return nil
}

func (m *EccVerifyRequest) GetDst() []byte {
	if m != nil {
		return m.Dst
	}
	return nil
}

type EccVerifyResponse struct {
	Valid bool `protobuf:"varint,1,opt,name=valid" json:"valid,omitempty"`
}

func (m *EccVerifyResponse) Reset()                    { *m = EccVerifyResponse{} }
func (m *EccVerifyResponse) String() string            { return proto.CompactTextString(m) }
func (*EccVerifyResponse) ProtoMessage()               {}
func (*EccVerifyResponse) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{5} }

func (m *EccVerifyResponse) GetValid() bool {
	if m != nil {
		return m.Valid
	}
	return false
}

type EccEncryptRequest struct {
	Label []byte `protobuf:"bytes,1,opt,name=label,proto3" json:"label,omitempty"`
	Msg   []byte `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (m *EccEncryptRequest) Reset()                    { *m = EccEncryptRequest{} }
func (m *EccEncryptRequest) String() string            { return proto.CompactTextString(m) }
func (*EccEncryptRequest) ProtoMessage()               {}
func (*EccEncryptRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{6} }

func (m *EccEncryptRequest) GetLabel() []byte {
	if m != nil {
		return m.Label
	}
	return nil
}

func (m *EccEncryptRequest) GetMsg() []byte {
	if m != nil {
		return m.Msg
	}
	return nil
}

type EccEncryptResponse struct {
	Dst []byte `protobuf:"bytes,1,opt,name=dst,proto3" json:"dst,omitempty"`
}

func (m *EccEncryptResponse) Reset()                    { *m = EccEncryptResponse{} }
func (m *EccEncryptResponse) String() string            { return proto.CompactTextString(m) }
func (*EccEncryptResponse) ProtoMessage()               {}
func (*EccEncryptResponse) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{7} }

func (m *EccEncryptResponse) GetDst() []byte {
	if m != nil {
		return m.Dst
	}
	return nil
}

type EccDecryptRequest struct {
	Label []byte `protobuf:"bytes,1,opt,name=label,proto3" json:"label,omitempty"`
	Msg   []byte `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (m *EccDecryptRequest) Reset()                    { *m = EccDecryptRequest{} }
func (m *EccDecryptRequest) String() string            { return proto.CompactTextString(m) }
func (*EccDecryptRequest) ProtoMessage()               {}
func (*EccDecryptRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{8} }

func (m *EccDecryptRequest) GetLabel() []byte {
	if m != nil {
		return m.Label
	}
	return nil
}

func (m *EccDecryptRequest) GetMsg() []byte {
	if m != nil {
		return m.Msg
	}
	return nil
}

type EccDecryptResponse struct {
	Dst []byte `protobuf:"bytes,1,opt,name=dst,proto3" json:"dst,omitempty"`
}

func (m *EccDecryptResponse) Reset()                    { *m = EccDecryptResponse{} }
func (m *EccDecryptResponse) String() string            { return proto.CompactTextString(m) }
func (*EccDecryptResponse) ProtoMessage()               {}
func (*EccDecryptResponse) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{9} }

func (m *EccDecryptResponse) GetDst() []byte {
	if m != nil {
		return m.Dst
	}
	return nil
}

type EccPublicKeyRequest struct {
	Label []byte `protobuf:"bytes,1,opt,name=label,proto3" json:"label,omitempty"`
}

func (m *EccPublicKeyRequest) Reset()                    { *m = EccPublicKeyRequest{} }
func (m *EccPublicKeyRequest) String() string            { return proto.CompactTextString(m) }
func (*EccPublicKeyRequest) ProtoMessage()               {}
func (*EccPublicKeyRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{10} }

func (m *EccPublicKeyRequest) GetLabel() []byte {
	if m != nil {
		return m.Label
	}
	return nil
}

type EccPublicKeyResponse struct {
	X []byte `protobuf:"bytes,1,opt,name=X,proto3" json:"X,omitempty"`
	Y []byte `protobuf:"bytes,2,opt,name=Y,proto3" json:"Y,omitempty"`
}

func (m *EccPublicKeyResponse) Reset()                    { *m = EccPublicKeyResponse{} }
func (m *EccPublicKeyResponse) String() string            { return proto.CompactTextString(m) }
func (*EccPublicKeyResponse) ProtoMessage()               {}
func (*EccPublicKeyResponse) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{11} }

func (m *EccPublicKeyResponse) GetX() []byte {
	if m != nil {
		return m.X
	}
	return nil
}

func (m *EccPublicKeyResponse) GetY() []byte {
	if m != nil {
		return m.Y
	}
	return nil
}

func init() {
	proto.RegisterType((*EccGenerateRequest)(nil), "pb.EccGenerateRequest")
	proto.RegisterType((*EccGenerateResponse)(nil), "pb.EccGenerateResponse")
	proto.RegisterType((*EccSignRequest)(nil), "pb.EccSignRequest")
	proto.RegisterType((*EccSignResponse)(nil), "pb.EccSignResponse")
	proto.RegisterType((*EccVerifyRequest)(nil), "pb.EccVerifyRequest")
	proto.RegisterType((*EccVerifyResponse)(nil), "pb.EccVerifyResponse")
	proto.RegisterType((*EccEncryptRequest)(nil), "pb.EccEncryptRequest")
	proto.RegisterType((*EccEncryptResponse)(nil), "pb.EccEncryptResponse")
	proto.RegisterType((*EccDecryptRequest)(nil), "pb.EccDecryptRequest")
	proto.RegisterType((*EccDecryptResponse)(nil), "pb.EccDecryptResponse")
	proto.RegisterType((*EccPublicKeyRequest)(nil), "pb.EccPublicKeyRequest")
	proto.RegisterType((*EccPublicKeyResponse)(nil), "pb.EccPublicKeyResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for EccOperate service

type EccOperateClient interface {
	EccGenerate(ctx context.Context, in *EccGenerateRequest, opts ...grpc.CallOption) (*EccGenerateResponse, error)
	EccSignData(ctx context.Context, in *EccSignRequest, opts ...grpc.CallOption) (*EccSignResponse, error)
	EccVerifyData(ctx context.Context, in *EccVerifyRequest, opts ...grpc.CallOption) (*EccVerifyResponse, error)
	EccEncryptData(ctx context.Context, in *EccEncryptRequest, opts ...grpc.CallOption) (*EccEncryptResponse, error)
	EccDecryptData(ctx context.Context, in *EccDecryptRequest, opts ...grpc.CallOption) (*EccDecryptResponse, error)
	EccPublicKey(ctx context.Context, in *EccPublicKeyRequest, opts ...grpc.CallOption) (*EccPublicKeyResponse, error)
}

type eccOperateClient struct {
	cc *grpc.ClientConn
}

func NewEccOperateClient(cc *grpc.ClientConn) EccOperateClient {
	return &eccOperateClient{cc}
}

func (c *eccOperateClient) EccGenerate(ctx context.Context, in *EccGenerateRequest, opts ...grpc.CallOption) (*EccGenerateResponse, error) {
	out := new(EccGenerateResponse)
	err := grpc.Invoke(ctx, "/pb.EccOperate/EccGenerate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eccOperateClient) EccSignData(ctx context.Context, in *EccSignRequest, opts ...grpc.CallOption) (*EccSignResponse, error) {
	out := new(EccSignResponse)
	err := grpc.Invoke(ctx, "/pb.EccOperate/EccSignData", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eccOperateClient) EccVerifyData(ctx context.Context, in *EccVerifyRequest, opts ...grpc.CallOption) (*EccVerifyResponse, error) {
	out := new(EccVerifyResponse)
	err := grpc.Invoke(ctx, "/pb.EccOperate/EccVerifyData", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eccOperateClient) EccEncryptData(ctx context.Context, in *EccEncryptRequest, opts ...grpc.CallOption) (*EccEncryptResponse, error) {
	out := new(EccEncryptResponse)
	err := grpc.Invoke(ctx, "/pb.EccOperate/EccEncryptData", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eccOperateClient) EccDecryptData(ctx context.Context, in *EccDecryptRequest, opts ...grpc.CallOption) (*EccDecryptResponse, error) {
	out := new(EccDecryptResponse)
	err := grpc.Invoke(ctx, "/pb.EccOperate/EccDecryptData", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eccOperateClient) EccPublicKey(ctx context.Context, in *EccPublicKeyRequest, opts ...grpc.CallOption) (*EccPublicKeyResponse, error) {
	out := new(EccPublicKeyResponse)
	err := grpc.Invoke(ctx, "/pb.EccOperate/EccPublicKey", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for EccOperate service

type EccOperateServer interface {
	EccGenerate(context.Context, *EccGenerateRequest) (*EccGenerateResponse, error)
	EccSignData(context.Context, *EccSignRequest) (*EccSignResponse, error)
	EccVerifyData(context.Context, *EccVerifyRequest) (*EccVerifyResponse, error)
	EccEncryptData(context.Context, *EccEncryptRequest) (*EccEncryptResponse, error)
	EccDecryptData(context.Context, *EccDecryptRequest) (*EccDecryptResponse, error)
	EccPublicKey(context.Context, *EccPublicKeyRequest) (*EccPublicKeyResponse, error)
}

func RegisterEccOperateServer(s *grpc.Server, srv EccOperateServer) {
	s.RegisterService(&_EccOperate_serviceDesc, srv)
}

func _EccOperate_EccGenerate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EccGenerateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EccOperateServer).EccGenerate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.EccOperate/EccGenerate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EccOperateServer).EccGenerate(ctx, req.(*EccGenerateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EccOperate_EccSignData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EccSignRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EccOperateServer).EccSignData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.EccOperate/EccSignData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EccOperateServer).EccSignData(ctx, req.(*EccSignRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EccOperate_EccVerifyData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EccVerifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EccOperateServer).EccVerifyData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.EccOperate/EccVerifyData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EccOperateServer).EccVerifyData(ctx, req.(*EccVerifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EccOperate_EccEncryptData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EccEncryptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EccOperateServer).EccEncryptData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.EccOperate/EccEncryptData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EccOperateServer).EccEncryptData(ctx, req.(*EccEncryptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EccOperate_EccDecryptData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EccDecryptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EccOperateServer).EccDecryptData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.EccOperate/EccDecryptData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EccOperateServer).EccDecryptData(ctx, req.(*EccDecryptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EccOperate_EccPublicKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EccPublicKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EccOperateServer).EccPublicKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.EccOperate/EccPublicKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EccOperateServer).EccPublicKey(ctx, req.(*EccPublicKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _EccOperate_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.EccOperate",
	HandlerType: (*EccOperateServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "EccGenerate",
			Handler:    _EccOperate_EccGenerate_Handler,
		},
		{
			MethodName: "EccSignData",
			Handler:    _EccOperate_EccSignData_Handler,
		},
		{
			MethodName: "EccVerifyData",
			Handler:    _EccOperate_EccVerifyData_Handler,
		},
		{
			MethodName: "EccEncryptData",
			Handler:    _EccOperate_EccEncryptData_Handler,
		},
		{
			MethodName: "EccDecryptData",
			Handler:    _EccOperate_EccDecryptData_Handler,
		},
		{
			MethodName: "EccPublicKey",
			Handler:    _EccOperate_EccPublicKey_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ecc.proto",
}

func init() { proto.RegisterFile("ecc.proto", fileDescriptor2) }

var fileDescriptor2 = []byte{
	// 399 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x54, 0x41, 0x4b, 0xf3, 0x40,
	0x10, 0x6d, 0x9a, 0xef, 0x13, 0x3b, 0x56, 0xad, 0xdb, 0x5a, 0x43, 0xf0, 0x20, 0x2b, 0x88, 0x22,
	0xf4, 0x50, 0x2f, 0x05, 0x41, 0x14, 0x13, 0x3c, 0x28, 0x28, 0x15, 0xa5, 0x3d, 0x26, 0xdb, 0xb1,
	0x06, 0xd2, 0x34, 0x26, 0xa9, 0xd0, 0xdf, 0xe1, 0x1f, 0x96, 0x6c, 0x36, 0xdb, 0x6c, 0x6a, 0x85,
	0xe2, 0x6d, 0xe7, 0x65, 0xde, 0x9b, 0xdd, 0x79, 0x8f, 0x40, 0x0d, 0x19, 0xeb, 0x84, 0xd1, 0x34,
	0x99, 0x92, 0x6a, 0xe8, 0xd2, 0x2e, 0x10, 0x9b, 0xb1, 0x3b, 0x0c, 0x30, 0x72, 0x12, 0xec, 0xe3,
	0xc7, 0x0c, 0xe3, 0x84, 0x1c, 0x42, 0x0d, 0xc3, 0x77, 0x9c, 0x60, 0xe4, 0xf8, 0x86, 0x76, 0xa4,
	0x9d, 0x6e, 0xf6, 0x17, 0x00, 0x7d, 0x81, 0xa6, 0xc2, 0x89, 0xc3, 0x69, 0x10, 0x23, 0x69, 0xc1,
	0x7f, 0xdf, 0x71, 0x31, 0x23, 0xd4, 0xfb, 0x59, 0x41, 0xea, 0xa0, 0x59, 0x46, 0x95, 0x23, 0x9a,
	0x95, 0x56, 0x03, 0x43, 0xcf, 0xaa, 0x41, 0x5a, 0x0d, 0x8d, 0x7f, 0x59, 0x35, 0xa4, 0x3d, 0xd8,
	0xb1, 0x19, 0x7b, 0xf6, 0xc6, 0x41, 0x7e, 0x8d, 0x9f, 0x15, 0x1b, 0xa0, 0x4f, 0xe2, 0xb1, 0xd0,
	0x4c, 0x8f, 0xf4, 0x18, 0x76, 0x25, 0x53, 0x5c, 0xa6, 0x01, 0xfa, 0x28, 0x4e, 0x04, 0x31, 0x3d,
	0xd2, 0x07, 0x68, 0xd8, 0x8c, 0xbd, 0x62, 0xe4, 0xbd, 0xcd, 0xd7, 0x1c, 0x90, 0xab, 0xe9, 0x0b,
	0xb5, 0x33, 0xd8, 0x2b, 0xa8, 0x2d, 0x36, 0xf0, 0xe9, 0xf8, 0xde, 0x48, 0xac, 0x2c, 0x2b, 0xe8,
	0x25, 0x6f, 0xb5, 0x03, 0x16, 0xcd, 0xc3, 0x64, 0xdd, 0xa7, 0x9d, 0x70, 0x7f, 0x24, 0x79, 0xe5,
	0xeb, 0xb2, 0x21, 0x16, 0xfe, 0x61, 0x88, 0x24, 0xaf, 0x1c, 0x72, 0xce, 0x8d, 0x7f, 0x9a, 0xb9,
	0xbe, 0xc7, 0xee, 0xf1, 0xf7, 0x2d, 0xd2, 0x2e, 0xb4, 0xd4, 0x66, 0x21, 0xcb, 0x23, 0xa0, 0x29,
	0x11, 0x10, 0xf1, 0x18, 0x76, 0xbf, 0x74, 0x00, 0x9b, 0xb1, 0xc7, 0x90, 0x27, 0x8b, 0x5c, 0xc3,
	0x56, 0x21, 0x68, 0xa4, 0xdd, 0x09, 0xdd, 0xce, 0x72, 0x5a, 0xcd, 0x83, 0x25, 0x3c, 0x1b, 0x45,
	0x2b, 0xa4, 0xc7, 0x15, 0xd2, 0x64, 0x58, 0x4e, 0xe2, 0x10, 0x22, 0x3a, 0x0b, 0x21, 0x33, 0x9b,
	0x0a, 0x26, 0x99, 0x57, 0xb0, 0x2d, 0x0d, 0xe6, 0xdc, 0x96, 0xe8, 0x53, 0x12, 0x64, 0xee, 0x97,
	0x50, 0xc9, 0xbf, 0xe1, 0x69, 0x16, 0xc6, 0x71, 0x81, 0xbc, 0x55, 0x4d, 0x82, 0xd9, 0x2e, 0xc3,
	0x25, 0x09, 0x61, 0x8b, 0x22, 0xa1, 0xfa, 0x2c, 0x25, 0x4a, 0x0e, 0xd2, 0x0a, 0xb9, 0x85, 0x7a,
	0xd1, 0x04, 0x92, 0xaf, 0xaa, 0xec, 0xa1, 0x69, 0x2c, 0x7f, 0xc8, 0x45, 0xdc, 0x0d, 0xfe, 0xbb,
	0xb8, 0xf8, 0x0e, 0x00, 0x00, 0xff, 0xff, 0x52, 0x2a, 0xfe, 0x38, 0x3b, 0x04, 0x00, 0x00,
}
