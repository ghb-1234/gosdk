// Code generated by protoc-gen-go. DO NOT EDIT.
// source: sm4.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Sm4GenerateRequest struct {
	Ephemeral bool `protobuf:"varint,1,opt,name=ephemeral" json:"ephemeral,omitempty"`
}

func (m *Sm4GenerateRequest) Reset()                    { *m = Sm4GenerateRequest{} }
func (m *Sm4GenerateRequest) String() string            { return proto.CompactTextString(m) }
func (*Sm4GenerateRequest) ProtoMessage()               {}
func (*Sm4GenerateRequest) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{0} }

func (m *Sm4GenerateRequest) GetEphemeral() bool {
	if m != nil {
		return m.Ephemeral
	}
	return false
}

type Sm4GenerateResponse struct {
	Label []byte `protobuf:"bytes,1,opt,name=label,proto3" json:"label,omitempty"`
	Value []byte `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *Sm4GenerateResponse) Reset()                    { *m = Sm4GenerateResponse{} }
func (m *Sm4GenerateResponse) String() string            { return proto.CompactTextString(m) }
func (*Sm4GenerateResponse) ProtoMessage()               {}
func (*Sm4GenerateResponse) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{1} }

func (m *Sm4GenerateResponse) GetLabel() []byte {
	if m != nil {
		return m.Label
	}
	return nil
}

func (m *Sm4GenerateResponse) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

type Sm4EncryptRequest struct {
	Label []byte `protobuf:"bytes,1,opt,name=label,proto3" json:"label,omitempty"`
	Msg   []byte `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (m *Sm4EncryptRequest) Reset()                    { *m = Sm4EncryptRequest{} }
func (m *Sm4EncryptRequest) String() string            { return proto.CompactTextString(m) }
func (*Sm4EncryptRequest) ProtoMessage()               {}
func (*Sm4EncryptRequest) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{2} }

func (m *Sm4EncryptRequest) GetLabel() []byte {
	if m != nil {
		return m.Label
	}
	return nil
}

func (m *Sm4EncryptRequest) GetMsg() []byte {
	if m != nil {
		return m.Msg
	}
	return nil
}

type Sm4EncryptResponse struct {
	Dst []byte `protobuf:"bytes,1,opt,name=dst,proto3" json:"dst,omitempty"`
}

func (m *Sm4EncryptResponse) Reset()                    { *m = Sm4EncryptResponse{} }
func (m *Sm4EncryptResponse) String() string            { return proto.CompactTextString(m) }
func (*Sm4EncryptResponse) ProtoMessage()               {}
func (*Sm4EncryptResponse) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{3} }

func (m *Sm4EncryptResponse) GetDst() []byte {
	if m != nil {
		return m.Dst
	}
	return nil
}

type Sm4DecryptRequest struct {
	Label []byte `protobuf:"bytes,1,opt,name=label,proto3" json:"label,omitempty"`
	Msg   []byte `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (m *Sm4DecryptRequest) Reset()                    { *m = Sm4DecryptRequest{} }
func (m *Sm4DecryptRequest) String() string            { return proto.CompactTextString(m) }
func (*Sm4DecryptRequest) ProtoMessage()               {}
func (*Sm4DecryptRequest) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{4} }

func (m *Sm4DecryptRequest) GetLabel() []byte {
	if m != nil {
		return m.Label
	}
	return nil
}

func (m *Sm4DecryptRequest) GetMsg() []byte {
	if m != nil {
		return m.Msg
	}
	return nil
}

type Sm4DecryptResponse struct {
	Dst []byte `protobuf:"bytes,1,opt,name=dst,proto3" json:"dst,omitempty"`
}

func (m *Sm4DecryptResponse) Reset()                    { *m = Sm4DecryptResponse{} }
func (m *Sm4DecryptResponse) String() string            { return proto.CompactTextString(m) }
func (*Sm4DecryptResponse) ProtoMessage()               {}
func (*Sm4DecryptResponse) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{5} }

func (m *Sm4DecryptResponse) GetDst() []byte {
	if m != nil {
		return m.Dst
	}
	return nil
}

func init() {
	proto.RegisterType((*Sm4GenerateRequest)(nil), "pb.Sm4GenerateRequest")
	proto.RegisterType((*Sm4GenerateResponse)(nil), "pb.Sm4GenerateResponse")
	proto.RegisterType((*Sm4EncryptRequest)(nil), "pb.Sm4EncryptRequest")
	proto.RegisterType((*Sm4EncryptResponse)(nil), "pb.Sm4EncryptResponse")
	proto.RegisterType((*Sm4DecryptRequest)(nil), "pb.Sm4DecryptRequest")
	proto.RegisterType((*Sm4DecryptResponse)(nil), "pb.Sm4DecryptResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Sm4Operate service

type Sm4OperateClient interface {
	Sm4Generate(ctx context.Context, in *Sm4GenerateRequest, opts ...grpc.CallOption) (*Sm4GenerateResponse, error)
	Sm4EncryptData(ctx context.Context, in *Sm4EncryptRequest, opts ...grpc.CallOption) (*Sm4EncryptResponse, error)
	Sm4DecryptData(ctx context.Context, in *Sm4DecryptRequest, opts ...grpc.CallOption) (*Sm4DecryptResponse, error)
	Sm4Key(ctx context.Context, in *Sm4GenerateRequest, opts ...grpc.CallOption) (*Sm4GenerateResponse, error)
}

type sm4OperateClient struct {
	cc *grpc.ClientConn
}

func NewSm4OperateClient(cc *grpc.ClientConn) Sm4OperateClient {
	return &sm4OperateClient{cc}
}

func (c *sm4OperateClient) Sm4Generate(ctx context.Context, in *Sm4GenerateRequest, opts ...grpc.CallOption) (*Sm4GenerateResponse, error) {
	out := new(Sm4GenerateResponse)
	err := grpc.Invoke(ctx, "/pb.Sm4Operate/Sm4Generate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sm4OperateClient) Sm4EncryptData(ctx context.Context, in *Sm4EncryptRequest, opts ...grpc.CallOption) (*Sm4EncryptResponse, error) {
	out := new(Sm4EncryptResponse)
	err := grpc.Invoke(ctx, "/pb.Sm4Operate/Sm4EncryptData", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sm4OperateClient) Sm4DecryptData(ctx context.Context, in *Sm4DecryptRequest, opts ...grpc.CallOption) (*Sm4DecryptResponse, error) {
	out := new(Sm4DecryptResponse)
	err := grpc.Invoke(ctx, "/pb.Sm4Operate/Sm4DecryptData", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sm4OperateClient) Sm4Key(ctx context.Context, in *Sm4GenerateRequest, opts ...grpc.CallOption) (*Sm4GenerateResponse, error) {
	out := new(Sm4GenerateResponse)
	err := grpc.Invoke(ctx, "/pb.Sm4Operate/Sm4Key", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Sm4Operate service

type Sm4OperateServer interface {
	Sm4Generate(context.Context, *Sm4GenerateRequest) (*Sm4GenerateResponse, error)
	Sm4EncryptData(context.Context, *Sm4EncryptRequest) (*Sm4EncryptResponse, error)
	Sm4DecryptData(context.Context, *Sm4DecryptRequest) (*Sm4DecryptResponse, error)
	Sm4Key(context.Context, *Sm4GenerateRequest) (*Sm4GenerateResponse, error)
}

func RegisterSm4OperateServer(s *grpc.Server, srv Sm4OperateServer) {
	s.RegisterService(&_Sm4Operate_serviceDesc, srv)
}

func _Sm4Operate_Sm4Generate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Sm4GenerateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Sm4OperateServer).Sm4Generate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Sm4Operate/Sm4Generate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Sm4OperateServer).Sm4Generate(ctx, req.(*Sm4GenerateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sm4Operate_Sm4EncryptData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Sm4EncryptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Sm4OperateServer).Sm4EncryptData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Sm4Operate/Sm4EncryptData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Sm4OperateServer).Sm4EncryptData(ctx, req.(*Sm4EncryptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sm4Operate_Sm4DecryptData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Sm4DecryptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Sm4OperateServer).Sm4DecryptData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Sm4Operate/Sm4DecryptData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Sm4OperateServer).Sm4DecryptData(ctx, req.(*Sm4DecryptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sm4Operate_Sm4Key_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Sm4GenerateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Sm4OperateServer).Sm4Key(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Sm4Operate/Sm4Key",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Sm4OperateServer).Sm4Key(ctx, req.(*Sm4GenerateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Sm4Operate_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Sm4Operate",
	HandlerType: (*Sm4OperateServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Sm4Generate",
			Handler:    _Sm4Operate_Sm4Generate_Handler,
		},
		{
			MethodName: "Sm4EncryptData",
			Handler:    _Sm4Operate_Sm4EncryptData_Handler,
		},
		{
			MethodName: "Sm4DecryptData",
			Handler:    _Sm4Operate_Sm4DecryptData_Handler,
		},
		{
			MethodName: "Sm4Key",
			Handler:    _Sm4Operate_Sm4Key_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sm4.proto",
}

func init() { proto.RegisterFile("sm4.proto", fileDescriptor5) }

var fileDescriptor5 = []byte{
	// 269 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x52, 0xb1, 0x4e, 0xc3, 0x30,
	0x10, 0x6d, 0x53, 0x51, 0xd1, 0x03, 0xa1, 0x72, 0x40, 0xa9, 0x2a, 0x06, 0xe4, 0x01, 0x31, 0x65,
	0x28, 0xde, 0xba, 0x50, 0xa9, 0x88, 0x81, 0x01, 0x29, 0xf9, 0x02, 0x07, 0x4e, 0x30, 0xc4, 0x89,
	0xb1, 0x5d, 0xa4, 0x7e, 0x06, 0x7f, 0x8c, 0x62, 0x9b, 0x14, 0xa7, 0xb0, 0xc0, 0x76, 0xf7, 0xe4,
	0xf7, 0xde, 0xbd, 0x27, 0xc3, 0xc8, 0x48, 0x9e, 0x2a, 0x5d, 0xdb, 0x1a, 0x13, 0x55, 0xb0, 0x39,
	0x60, 0x2e, 0xf9, 0x3d, 0x55, 0xa4, 0x85, 0xa5, 0x8c, 0xde, 0xd6, 0x64, 0x2c, 0x5e, 0xc0, 0x88,
	0xd4, 0x2b, 0x49, 0xd2, 0xa2, 0x9c, 0xf6, 0x2f, 0xfb, 0xd7, 0xfb, 0xd9, 0x16, 0x60, 0x4b, 0x38,
	0x89, 0x38, 0x46, 0xd5, 0x95, 0x21, 0x3c, 0x85, 0xbd, 0x52, 0x14, 0xe4, 0x09, 0x87, 0x99, 0x5f,
	0x1a, 0xf4, 0x5d, 0x94, 0x6b, 0x9a, 0x26, 0x1e, 0x75, 0x0b, 0x5b, 0xc0, 0x71, 0x2e, 0xf9, 0x5d,
	0xf5, 0xa4, 0x37, 0xca, 0x7e, 0xb9, 0xfe, 0x2c, 0x30, 0x86, 0x81, 0x34, 0x2f, 0x81, 0xde, 0x8c,
	0xec, 0xca, 0xdd, 0xdc, 0x92, 0x83, 0xfd, 0x18, 0x06, 0xcf, 0xc6, 0x06, 0x6e, 0x33, 0x06, 0x93,
	0x15, 0xfd, 0xc3, 0xa4, 0x25, 0xff, 0x66, 0x32, 0xff, 0x48, 0x00, 0x72, 0xc9, 0x1f, 0x95, 0x2b,
	0x03, 0x6f, 0xe1, 0xe0, 0x5b, 0x37, 0x38, 0x49, 0x55, 0x91, 0xee, 0x16, 0x3c, 0x3b, 0xdf, 0xc1,
	0xbd, 0x01, 0xeb, 0xe1, 0x12, 0x8e, 0xb6, 0xe9, 0x56, 0xc2, 0x0a, 0x3c, 0x0b, 0x8f, 0xe3, 0xba,
	0x66, 0x93, 0x2e, 0xdc, 0x91, 0x08, 0xb7, 0x47, 0x12, 0x71, 0x19, 0xad, 0x44, 0x27, 0x26, 0xeb,
	0xe1, 0x02, 0x86, 0xb9, 0xe4, 0x0f, 0xb4, 0xf9, 0x43, 0x84, 0x62, 0xe8, 0xfe, 0xd7, 0xcd, 0x67,
	0x00, 0x00, 0x00, 0xff, 0xff, 0x0f, 0x98, 0x40, 0x39, 0x6c, 0x02, 0x00, 0x00,
}
