// Code generated by protoc-gen-go. DO NOT EDIT.
// source: rsa.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type RsaGenerateRequest struct {
	Ephemeral bool `protobuf:"varint,1,opt,name=ephemeral" json:"ephemeral,omitempty"`
}

func (m *RsaGenerateRequest) Reset()                    { *m = RsaGenerateRequest{} }
func (m *RsaGenerateRequest) String() string            { return proto.CompactTextString(m) }
func (*RsaGenerateRequest) ProtoMessage()               {}
func (*RsaGenerateRequest) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{0} }

func (m *RsaGenerateRequest) GetEphemeral() bool {
	if m != nil {
		return m.Ephemeral
	}
	return false
}

type RsaGenerateResponse struct {
	Label    []byte `protobuf:"bytes,1,opt,name=label,proto3" json:"label,omitempty"`
	D        []byte `protobuf:"bytes,2,opt,name=D,proto3" json:"D,omitempty"`
	Prime    []byte `protobuf:"bytes,3,opt,name=Prime,proto3" json:"Prime,omitempty"`
	Exponent []byte `protobuf:"bytes,4,opt,name=Exponent,proto3" json:"Exponent,omitempty"`
	N        []byte `protobuf:"bytes,5,opt,name=N,proto3" json:"N,omitempty"`
	E        int64  `protobuf:"varint,6,opt,name=E" json:"E,omitempty"`
}

func (m *RsaGenerateResponse) Reset()                    { *m = RsaGenerateResponse{} }
func (m *RsaGenerateResponse) String() string            { return proto.CompactTextString(m) }
func (*RsaGenerateResponse) ProtoMessage()               {}
func (*RsaGenerateResponse) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{1} }

func (m *RsaGenerateResponse) GetLabel() []byte {
	if m != nil {
		return m.Label
	}
	return nil
}

func (m *RsaGenerateResponse) GetD() []byte {
	if m != nil {
		return m.D
	}
	return nil
}

func (m *RsaGenerateResponse) GetPrime() []byte {
	if m != nil {
		return m.Prime
	}
	return nil
}

func (m *RsaGenerateResponse) GetExponent() []byte {
	if m != nil {
		return m.Exponent
	}
	return nil
}

func (m *RsaGenerateResponse) GetN() []byte {
	if m != nil {
		return m.N
	}
	return nil
}

func (m *RsaGenerateResponse) GetE() int64 {
	if m != nil {
		return m.E
	}
	return 0
}

type RsaSignRequest struct {
	Label []byte `protobuf:"bytes,1,opt,name=label,proto3" json:"label,omitempty"`
	Msg   []byte `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (m *RsaSignRequest) Reset()                    { *m = RsaSignRequest{} }
func (m *RsaSignRequest) String() string            { return proto.CompactTextString(m) }
func (*RsaSignRequest) ProtoMessage()               {}
func (*RsaSignRequest) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{2} }

func (m *RsaSignRequest) GetLabel() []byte {
	if m != nil {
		return m.Label
	}
	return nil
}

func (m *RsaSignRequest) GetMsg() []byte {
	if m != nil {
		return m.Msg
	}
	return nil
}

type RsaSignResponse struct {
	Dst []byte `protobuf:"bytes,1,opt,name=dst,proto3" json:"dst,omitempty"`
}

func (m *RsaSignResponse) Reset()                    { *m = RsaSignResponse{} }
func (m *RsaSignResponse) String() string            { return proto.CompactTextString(m) }
func (*RsaSignResponse) ProtoMessage()               {}
func (*RsaSignResponse) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{3} }

func (m *RsaSignResponse) GetDst() []byte {
	if m != nil {
		return m.Dst
	}
	return nil
}

type RsaVerifyRequest struct {
	Label []byte `protobuf:"bytes,1,opt,name=label,proto3" json:"label,omitempty"`
	Msg   []byte `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Dst   []byte `protobuf:"bytes,3,opt,name=dst,proto3" json:"dst,omitempty"`
}

func (m *RsaVerifyRequest) Reset()                    { *m = RsaVerifyRequest{} }
func (m *RsaVerifyRequest) String() string            { return proto.CompactTextString(m) }
func (*RsaVerifyRequest) ProtoMessage()               {}
func (*RsaVerifyRequest) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{4} }

func (m *RsaVerifyRequest) GetLabel() []byte {
	if m != nil {
		return m.Label
	}
	return nil
}

func (m *RsaVerifyRequest) GetMsg() []byte {
	if m != nil {
		return m.Msg
	}
	return nil
}

func (m *RsaVerifyRequest) GetDst() []byte {
	if m != nil {
		return m.Dst
	}
	return nil
}

type RsaVerifyResponse struct {
	Valid bool `protobuf:"varint,1,opt,name=valid" json:"valid,omitempty"`
}

func (m *RsaVerifyResponse) Reset()                    { *m = RsaVerifyResponse{} }
func (m *RsaVerifyResponse) String() string            { return proto.CompactTextString(m) }
func (*RsaVerifyResponse) ProtoMessage()               {}
func (*RsaVerifyResponse) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{5} }

func (m *RsaVerifyResponse) GetValid() bool {
	if m != nil {
		return m.Valid
	}
	return false
}

type RsaEncryptRequest struct {
	Label []byte `protobuf:"bytes,1,opt,name=label,proto3" json:"label,omitempty"`
	Msg   []byte `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (m *RsaEncryptRequest) Reset()                    { *m = RsaEncryptRequest{} }
func (m *RsaEncryptRequest) String() string            { return proto.CompactTextString(m) }
func (*RsaEncryptRequest) ProtoMessage()               {}
func (*RsaEncryptRequest) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{6} }

func (m *RsaEncryptRequest) GetLabel() []byte {
	if m != nil {
		return m.Label
	}
	return nil
}

func (m *RsaEncryptRequest) GetMsg() []byte {
	if m != nil {
		return m.Msg
	}
	return nil
}

type RsaEncryptResponse struct {
	Dst []byte `protobuf:"bytes,1,opt,name=dst,proto3" json:"dst,omitempty"`
}

func (m *RsaEncryptResponse) Reset()                    { *m = RsaEncryptResponse{} }
func (m *RsaEncryptResponse) String() string            { return proto.CompactTextString(m) }
func (*RsaEncryptResponse) ProtoMessage()               {}
func (*RsaEncryptResponse) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{7} }

func (m *RsaEncryptResponse) GetDst() []byte {
	if m != nil {
		return m.Dst
	}
	return nil
}

type RsaDecryptRequest struct {
	Label []byte `protobuf:"bytes,1,opt,name=label,proto3" json:"label,omitempty"`
	Msg   []byte `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (m *RsaDecryptRequest) Reset()                    { *m = RsaDecryptRequest{} }
func (m *RsaDecryptRequest) String() string            { return proto.CompactTextString(m) }
func (*RsaDecryptRequest) ProtoMessage()               {}
func (*RsaDecryptRequest) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{8} }

func (m *RsaDecryptRequest) GetLabel() []byte {
	if m != nil {
		return m.Label
	}
	return nil
}

func (m *RsaDecryptRequest) GetMsg() []byte {
	if m != nil {
		return m.Msg
	}
	return nil
}

type RsaDecryptResponse struct {
	Dst []byte `protobuf:"bytes,1,opt,name=dst,proto3" json:"dst,omitempty"`
}

func (m *RsaDecryptResponse) Reset()                    { *m = RsaDecryptResponse{} }
func (m *RsaDecryptResponse) String() string            { return proto.CompactTextString(m) }
func (*RsaDecryptResponse) ProtoMessage()               {}
func (*RsaDecryptResponse) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{9} }

func (m *RsaDecryptResponse) GetDst() []byte {
	if m != nil {
		return m.Dst
	}
	return nil
}

type RsaPublicKeyRequest struct {
	Label []byte `protobuf:"bytes,1,opt,name=label,proto3" json:"label,omitempty"`
}

func (m *RsaPublicKeyRequest) Reset()                    { *m = RsaPublicKeyRequest{} }
func (m *RsaPublicKeyRequest) String() string            { return proto.CompactTextString(m) }
func (*RsaPublicKeyRequest) ProtoMessage()               {}
func (*RsaPublicKeyRequest) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{10} }

func (m *RsaPublicKeyRequest) GetLabel() []byte {
	if m != nil {
		return m.Label
	}
	return nil
}

type RsaPublicKeyResponse struct {
	N []byte `protobuf:"bytes,1,opt,name=N,proto3" json:"N,omitempty"`
	E int64  `protobuf:"varint,2,opt,name=E" json:"E,omitempty"`
}

func (m *RsaPublicKeyResponse) Reset()                    { *m = RsaPublicKeyResponse{} }
func (m *RsaPublicKeyResponse) String() string            { return proto.CompactTextString(m) }
func (*RsaPublicKeyResponse) ProtoMessage()               {}
func (*RsaPublicKeyResponse) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{11} }

func (m *RsaPublicKeyResponse) GetN() []byte {
	if m != nil {
		return m.N
	}
	return nil
}

func (m *RsaPublicKeyResponse) GetE() int64 {
	if m != nil {
		return m.E
	}
	return 0
}

func init() {
	proto.RegisterType((*RsaGenerateRequest)(nil), "pb.RsaGenerateRequest")
	proto.RegisterType((*RsaGenerateResponse)(nil), "pb.RsaGenerateResponse")
	proto.RegisterType((*RsaSignRequest)(nil), "pb.RsaSignRequest")
	proto.RegisterType((*RsaSignResponse)(nil), "pb.RsaSignResponse")
	proto.RegisterType((*RsaVerifyRequest)(nil), "pb.RsaVerifyRequest")
	proto.RegisterType((*RsaVerifyResponse)(nil), "pb.RsaVerifyResponse")
	proto.RegisterType((*RsaEncryptRequest)(nil), "pb.RsaEncryptRequest")
	proto.RegisterType((*RsaEncryptResponse)(nil), "pb.RsaEncryptResponse")
	proto.RegisterType((*RsaDecryptRequest)(nil), "pb.RsaDecryptRequest")
	proto.RegisterType((*RsaDecryptResponse)(nil), "pb.RsaDecryptResponse")
	proto.RegisterType((*RsaPublicKeyRequest)(nil), "pb.RsaPublicKeyRequest")
	proto.RegisterType((*RsaPublicKeyResponse)(nil), "pb.RsaPublicKeyResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for RsaOperate service

type RsaOperateClient interface {
	RsaGenerate(ctx context.Context, in *RsaGenerateRequest, opts ...grpc.CallOption) (*RsaGenerateResponse, error)
	RsaSignData(ctx context.Context, in *RsaSignRequest, opts ...grpc.CallOption) (*RsaSignResponse, error)
	RsaEncryptData(ctx context.Context, in *RsaEncryptRequest, opts ...grpc.CallOption) (*RsaEncryptResponse, error)
	RsaDecryptData(ctx context.Context, in *RsaDecryptRequest, opts ...grpc.CallOption) (*RsaDecryptResponse, error)
	RsaVerifyData(ctx context.Context, in *RsaVerifyRequest, opts ...grpc.CallOption) (*RsaVerifyResponse, error)
	RsaPublicKey(ctx context.Context, in *RsaPublicKeyRequest, opts ...grpc.CallOption) (*RsaPublicKeyResponse, error)
}

type rsaOperateClient struct {
	cc *grpc.ClientConn
}

func NewRsaOperateClient(cc *grpc.ClientConn) RsaOperateClient {
	return &rsaOperateClient{cc}
}

func (c *rsaOperateClient) RsaGenerate(ctx context.Context, in *RsaGenerateRequest, opts ...grpc.CallOption) (*RsaGenerateResponse, error) {
	out := new(RsaGenerateResponse)
	err := grpc.Invoke(ctx, "/pb.RsaOperate/RsaGenerate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rsaOperateClient) RsaSignData(ctx context.Context, in *RsaSignRequest, opts ...grpc.CallOption) (*RsaSignResponse, error) {
	out := new(RsaSignResponse)
	err := grpc.Invoke(ctx, "/pb.RsaOperate/RsaSignData", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rsaOperateClient) RsaEncryptData(ctx context.Context, in *RsaEncryptRequest, opts ...grpc.CallOption) (*RsaEncryptResponse, error) {
	out := new(RsaEncryptResponse)
	err := grpc.Invoke(ctx, "/pb.RsaOperate/RsaEncryptData", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rsaOperateClient) RsaDecryptData(ctx context.Context, in *RsaDecryptRequest, opts ...grpc.CallOption) (*RsaDecryptResponse, error) {
	out := new(RsaDecryptResponse)
	err := grpc.Invoke(ctx, "/pb.RsaOperate/RsaDecryptData", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rsaOperateClient) RsaVerifyData(ctx context.Context, in *RsaVerifyRequest, opts ...grpc.CallOption) (*RsaVerifyResponse, error) {
	out := new(RsaVerifyResponse)
	err := grpc.Invoke(ctx, "/pb.RsaOperate/RsaVerifyData", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rsaOperateClient) RsaPublicKey(ctx context.Context, in *RsaPublicKeyRequest, opts ...grpc.CallOption) (*RsaPublicKeyResponse, error) {
	out := new(RsaPublicKeyResponse)
	err := grpc.Invoke(ctx, "/pb.RsaOperate/RsaPublicKey", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for RsaOperate service

type RsaOperateServer interface {
	RsaGenerate(context.Context, *RsaGenerateRequest) (*RsaGenerateResponse, error)
	RsaSignData(context.Context, *RsaSignRequest) (*RsaSignResponse, error)
	RsaEncryptData(context.Context, *RsaEncryptRequest) (*RsaEncryptResponse, error)
	RsaDecryptData(context.Context, *RsaDecryptRequest) (*RsaDecryptResponse, error)
	RsaVerifyData(context.Context, *RsaVerifyRequest) (*RsaVerifyResponse, error)
	RsaPublicKey(context.Context, *RsaPublicKeyRequest) (*RsaPublicKeyResponse, error)
}

func RegisterRsaOperateServer(s *grpc.Server, srv RsaOperateServer) {
	s.RegisterService(&_RsaOperate_serviceDesc, srv)
}

func _RsaOperate_RsaGenerate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RsaGenerateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RsaOperateServer).RsaGenerate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.RsaOperate/RsaGenerate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RsaOperateServer).RsaGenerate(ctx, req.(*RsaGenerateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RsaOperate_RsaSignData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RsaSignRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RsaOperateServer).RsaSignData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.RsaOperate/RsaSignData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RsaOperateServer).RsaSignData(ctx, req.(*RsaSignRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RsaOperate_RsaEncryptData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RsaEncryptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RsaOperateServer).RsaEncryptData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.RsaOperate/RsaEncryptData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RsaOperateServer).RsaEncryptData(ctx, req.(*RsaEncryptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RsaOperate_RsaDecryptData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RsaDecryptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RsaOperateServer).RsaDecryptData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.RsaOperate/RsaDecryptData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RsaOperateServer).RsaDecryptData(ctx, req.(*RsaDecryptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RsaOperate_RsaVerifyData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RsaVerifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RsaOperateServer).RsaVerifyData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.RsaOperate/RsaVerifyData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RsaOperateServer).RsaVerifyData(ctx, req.(*RsaVerifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RsaOperate_RsaPublicKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RsaPublicKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RsaOperateServer).RsaPublicKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.RsaOperate/RsaPublicKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RsaOperateServer).RsaPublicKey(ctx, req.(*RsaPublicKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _RsaOperate_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.RsaOperate",
	HandlerType: (*RsaOperateServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RsaGenerate",
			Handler:    _RsaOperate_RsaGenerate_Handler,
		},
		{
			MethodName: "RsaSignData",
			Handler:    _RsaOperate_RsaSignData_Handler,
		},
		{
			MethodName: "RsaEncryptData",
			Handler:    _RsaOperate_RsaEncryptData_Handler,
		},
		{
			MethodName: "RsaDecryptData",
			Handler:    _RsaOperate_RsaDecryptData_Handler,
		},
		{
			MethodName: "RsaVerifyData",
			Handler:    _RsaOperate_RsaVerifyData_Handler,
		},
		{
			MethodName: "RsaPublicKey",
			Handler:    _RsaOperate_RsaPublicKey_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rsa.proto",
}

func init() { proto.RegisterFile("rsa.proto", fileDescriptor3) }

var fileDescriptor3 = []byte{
	// 431 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x54, 0x5f, 0xeb, 0xd3, 0x30,
	0x14, 0x5d, 0x56, 0x37, 0xb6, 0xeb, 0xd4, 0x99, 0xfd, 0xb1, 0x14, 0x1f, 0x46, 0x04, 0x99, 0x08,
	0x7b, 0x98, 0x2f, 0x03, 0x41, 0x14, 0x5b, 0x7c, 0x50, 0xe6, 0x88, 0xe0, 0x7b, 0xba, 0xc5, 0x59,
	0xe8, 0xda, 0xd8, 0x74, 0xe2, 0x3e, 0x81, 0x1f, 0xc0, 0x2f, 0x2c, 0x4d, 0xd3, 0xac, 0xe9, 0x9c,
	0x30, 0x7e, 0x6f, 0xb9, 0x37, 0xe7, 0x9c, 0x7b, 0x73, 0xef, 0x21, 0xd0, 0xcf, 0x24, 0x5b, 0x88,
	0x2c, 0xcd, 0x53, 0xdc, 0x16, 0x21, 0x59, 0x02, 0xa6, 0x92, 0x7d, 0xe0, 0x09, 0xcf, 0x58, 0xce,
	0x29, 0xff, 0x71, 0xe4, 0x32, 0xc7, 0x4f, 0xa1, 0xcf, 0xc5, 0x77, 0x7e, 0xe0, 0x19, 0x8b, 0x5d,
	0x34, 0x43, 0xf3, 0x1e, 0x3d, 0x27, 0xc8, 0x6f, 0x04, 0x23, 0x8b, 0x24, 0x45, 0x9a, 0x48, 0x8e,
	0xc7, 0xd0, 0x89, 0x59, 0xc8, 0x4b, 0xc6, 0x80, 0x96, 0x01, 0x1e, 0x00, 0xf2, 0xdd, 0xb6, 0xca,
	0x20, 0xbf, 0xc0, 0x6c, 0xb2, 0xe8, 0xc0, 0x5d, 0xa7, 0xc4, 0xa8, 0x00, 0x7b, 0xd0, 0x0b, 0x7e,
	0x89, 0x34, 0xe1, 0x49, 0xee, 0xde, 0x53, 0x17, 0x26, 0x2e, 0xf8, 0x6b, 0xb7, 0x53, 0xf2, 0xd7,
	0x45, 0x14, 0xb8, 0xdd, 0x19, 0x9a, 0x3b, 0x14, 0x05, 0x64, 0x05, 0x0f, 0xa9, 0x64, 0x5f, 0xa2,
	0x7d, 0x52, 0x75, 0xfe, 0xef, 0x1e, 0x86, 0xe0, 0x1c, 0xe4, 0x5e, 0x77, 0x51, 0x1c, 0xc9, 0x33,
	0x78, 0x64, 0x98, 0xba, 0xfd, 0x21, 0x38, 0x3b, 0x99, 0x6b, 0x62, 0x71, 0x24, 0x9f, 0x60, 0x48,
	0x25, 0xfb, 0xca, 0xb3, 0xe8, 0xdb, 0xe9, 0xc6, 0x02, 0x95, 0x9a, 0x73, 0x56, 0x7b, 0x01, 0x8f,
	0x6b, 0x6a, 0xe7, 0x99, 0xfd, 0x64, 0x71, 0xb4, 0xd3, 0x53, 0x2e, 0x03, 0xf2, 0x5a, 0x41, 0x83,
	0x64, 0x9b, 0x9d, 0x44, 0x7e, 0xeb, 0xd3, 0x9e, 0xab, 0x95, 0x1a, 0xf2, 0xd5, 0xd7, 0x95, 0x45,
	0x7c, 0x7e, 0x87, 0x22, 0x86, 0x7c, 0xb5, 0xc8, 0x4b, 0x65, 0x95, 0xcd, 0x31, 0x8c, 0xa3, 0xed,
	0x47, 0xfe, 0xff, 0x29, 0x92, 0x25, 0x8c, 0x6d, 0xb0, 0x96, 0x55, 0x16, 0x40, 0x96, 0x05, 0xda,
	0xda, 0x02, 0xcb, 0x3f, 0x0e, 0x00, 0x95, 0xec, 0xb3, 0x50, 0x5e, 0xc4, 0x6f, 0xe1, 0x7e, 0xcd,
	0x9a, 0x78, 0xba, 0x10, 0xe1, 0xe2, 0xd2, 0xe0, 0xde, 0x93, 0x8b, 0x7c, 0x59, 0x8a, 0xb4, 0xf0,
	0x4a, 0x29, 0x14, 0xce, 0xf0, 0x59, 0xce, 0x30, 0xd6, 0xc8, 0x9a, 0xc9, 0xbc, 0x91, 0x95, 0x33,
	0xcc, 0x77, 0xca, 0x8d, 0x7a, 0xf0, 0x8a, 0x3c, 0xd1, 0x40, 0x7b, 0x93, 0xde, 0xb4, 0x99, 0x6e,
	0x48, 0xe8, 0xb1, 0x5a, 0x12, 0xf6, 0x9e, 0x8c, 0x44, 0x63, 0x03, 0xa4, 0x85, 0xdf, 0xc0, 0x03,
	0x63, 0x33, 0xa5, 0x30, 0xd6, 0x50, 0xcb, 0xc7, 0xde, 0xa4, 0x91, 0x35, 0xfc, 0xf7, 0x30, 0xa8,
	0x2f, 0x01, 0x57, 0xa3, 0x6a, 0xee, 0xd0, 0x73, 0x2f, 0x2f, 0x2a, 0x91, 0xb0, 0xab, 0x7e, 0x98,
	0x57, 0x7f, 0x03, 0x00, 0x00, 0xff, 0xff, 0x9e, 0x0c, 0x73, 0x2f, 0x6e, 0x04, 0x00, 0x00,
}
